# =============================================================================
# Official ECSS PLUTO Language Test File
# Contains ONLY official ECSS-E-ST-70-32C keywords and syntax
# =============================================================================

# Basic procedure with all official sections
procedure OfficialECSSTest
preconditions
  # Wait statements with official syntax
  wait until SystemTemperature > 25;
  wait until PowerLevel >= 80;
  wait until (Voltage > 12) and (Current < 5);
  wait until SystemStatus == "READY";
  wait until not ErrorFlag;
end preconditions

main
  # Activity calls - all official types
  initiate PowerOn();
  confirm SystemReady;
  initiate and confirm GyroCalibration();

  # Activity calls with parameters
  initiate SetPower(level=100);
  confirm CheckVoltage(threshold=12.5);
  initiate and confirm RunDiagnostic(mode="full", timeout=60);

  # Assignments with expressions using official operators
  Temperature = SensorReading;
  Result = (Alpha + Beta) * Gamma / Delta;
  Power = Base ** Exponent;
  Remainder = LargeNumber mod 1000;

  # Boolean operations with official keywords
  IsReady = true and not false;
  Status = (X > 0) or (Y < 100) and (Z != 50);
  Valid = (Pressure > 1000) and (Pressure < 1200);
  Alternative = (Value == Target) or (Value <> Baseline);

  # Property access chains (official syntax)
  CurrentTemp = Sensors.Temperature.Primary.Value;
  SystemState = Control.Main.Status.Code;

  # Conditional statements - official syntax
  if Temperature > 60 then
    initiate CoolingSystem();
    wait until Temperature < 50;
  elsif Temperature < 10 then
    initiate HeatingSystem();
    wait until Temperature > 15;
  else
    confirm TemperatureNormal;
  end if

  # Nested conditionals
  if SystemMode == "AUTO" then
    if AllSensorsReady then
      initiate AutoSequence();
    else
      initiate ManualMode();
    end if
  elsif SystemMode == "MANUAL" then
    wait until OperatorConfirm;
    initiate ManualSequence();
  else
    confirm SafeMode;
  end if

  # Loop statements - official syntax
  while Status != "COMPLETE" do
    wait until DataReady;
    initiate ProcessStep();
  end while

  for Sensor in SensorList do
    initiate Calibrate(sensor=Sensor);
    confirm CalibrationComplete;
  end for

  # Nested loops
  for Subsystem in SubsystemList do
    while Subsystem.Status != "READY" do
      wait until Subsystem.SelfTest == "PASS";
      initiate Subsystem.Initialize();
    end while
  end for

  # Complex expressions with official operators
  ComplexCalc = ((A + B) * C) / (D - E);
  LogicalResult = not (X and Y) or (Z > W);
  ExponentialCalc = (Base ** Power) + Offset;
  ModuloResult = (Counter mod MaxValue) + StartValue;

  # All comparison operators
  EqualCheck = (Value == Target);
  NotEqualCheck1 = (Value != Target);
  NotEqualCheck2 = (Value <> Target);
  LessCheck = (Value < Threshold);
  GreaterCheck = (Value > Threshold);
  LessEqualCheck = (Value <= Maximum);
  GreaterEqualCheck = (Value >= Minimum);

  # All logical combinations
  AndResult = (Condition1 and Condition2);
  OrResult = (Condition1 or Condition2);
  NotResult = not ErrorCondition;
  ComplexLogic = (A and B) or (not C and D);

  # Function calls with various parameter styles
  SimpleCall = GetValue();
  SingleParam = Calculate(input);
  MultipleParams = Process(data, mode, timeout);
  NamedParams = Configure(mode="auto", retries=3, timeout=30);
  MixedParams = Execute(command, mode="safe", verbose=true);

  # String operations
  Message = "System initialized successfully";
  Command = "START_SEQUENCE";
  Status = "OPERATIONAL";

  # Numeric values (all formats)
  Integer = 42;
  Decimal = 3.14159;
  Scientific = 1.5e6;
  Negative = -273;
  NegativeDecimal = -10.5;

  # Boolean literals
  Flag1 = true;
  Flag2 = false;
  Combined = Flag1 and not Flag2;

  # Parenthesized expressions
  Grouped = (A + B) * (C - D);
  NestedGroups = ((X * Y) + (Z / W)) ** 2;

end main

confirmation
  # Confirmation statements with official syntax
  confirm SystemOperational;
  confirm TemperatureNormal;
  confirm PowerStable;
  confirm CommunicationActive;

  # Confirmations with expressions
  confirm BatteryVoltage > 23.5;
  confirm SystemTemperature < 60;
  confirm ErrorCount == 0;
  confirm (PowerLevel > 90) and (Temperature < 70);
  confirm not ErrorFlag and SystemReady;

  # Confirmations with function calls
  confirm CheckAllSystems();
  confirm ValidateConfiguration(strict=true);

end confirmation
end procedure

# =============================================================================
# Additional Official ECSS PLUTO Procedures
# =============================================================================

procedure MinimalProcedure
main
  # Minimal procedure with just main section
  initiate BasicOperation();
  confirm Success;
end main
end procedure

procedure AdvancedControlFlow
preconditions
  wait until SystemReady;
end preconditions

main
  # Advanced control structures
  if Mode == "TEST" then
    for TestCase in TestList do
      if TestCase.Enabled then
        initiate RunTest(test=TestCase);
        if TestResult == "PASS" then
          confirm TestPassed;
        else
          initiate LogError(test=TestCase, result=TestResult);
        end if
      end if
    end for
  elsif Mode == "OPERATION" then
    while OperationActive do
      initiate MonitorSystems();
      if AnyErrors then
        initiate HandleErrors();
        wait until ErrorsResolved;
      end if
    end while
  else
    confirm StandbyMode;
  end if
end main

confirmation
  confirm AllTestsComplete or OperationComplete or StandbyActive;
end confirmation
end procedure
