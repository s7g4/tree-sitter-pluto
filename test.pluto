# =============================================================================
# Comprehensive PLUTO Language Test File
# Tests all implemented grammar features
# =============================================================================

# Basic procedure with all sections
procedure ComprehensiveTest
preconditions
  # Wait statements with various expressions
  wait until SystemTemp > 25 degC;
  wait until PowerLevel >= 80 %;
  wait until (Voltage > 12 V) and (Current < 5 A);
  wait until System.Status == "READY";
end preconditions

main
  # Activity calls - all types
  initiate PowerOn();
  confirm SystemReady;
  initiate and confirm GyroCalibration(duration=30 s, precision=0.1 deg);

  # Assignments with various expressions
  Temperature = Sensor.Ambient.Current;
  Result = (Alpha + Beta) * Gamma / Delta;
  Power = Base ** Exponent;
  Remainder = LargeNumber mod 1000;
  IsReady = true and not false;

  # Complex logical expressions
  Status = (X > 0) or (Y < 100) and (Z != 50);
  Valid = System.Pressure > 1000 Pa and System.Pressure < 1200 Pa;

  # Property access chains
  CurrentTemp = Sensors.Temperature.Primary.Value;
  SystemState = Control.Main.Status.Code;

  # Function calls
  Calculate(input1, input2, mode="precise");
  Result = ProcessData(data=SensorReading, threshold=0.5);

  # Conditional statements
  if Temperature > 60 degC then
    initiate CoolingSystem();
    wait until Temperature < 50 degC;
  elsif Temperature < 10 degC then
    initiate HeatingSystem();
  else
    confirm TemperatureNormal;
  end if

  # Loop statements
  while Status != "COMPLETE" do
    wait until DataReady;
    initiate ProcessStep();
  end while

  for Sensor in SensorList do
    initiate and confirm Calibrate(sensor=Sensor);
  end for

  # Nested expressions with parentheses
  ComplexCalc = ((A + B) * C) / (D - E);
  LogicalResult = not (X and Y) or (Z > W);

  # Units and measurements
  Distance = 1000 m;
  Angle = 45 deg;
  Time = 30 s;
  Frequency = 2.4 GHz;
  Voltage = 12.5 V;
  Current = 2.1 A;
  Temperature = -10 degC;
  Pressure = 1013.25 Pa;
  Mass = 5.5 kg;

  # String operations
  Message = "System initialized successfully";
  Command = "START_SEQUENCE";

  # Boolean operations
  Flag1 = true;
  Flag2 = false;
  Combined = Flag1 and not Flag2;

  # Mathematical operations with precedence
  Math1 = A + B * C;
  Math2 = (A + B) * C;
  Math3 = A ** B + C;
  Math4 = A + B ** C;

  # Comparison operations
  Compare1 = X == Y;
  Compare2 = A != B;
  Compare3 = P < Q;
  Compare4 = M >= N;
  Compare5 = Value <> Target;

  # Mixed expressions
  MixedResult = (Temp > 25 degC) and (Pressure < 1000 Pa) or SystemReady;

end main

confirmation
  # Confirmation with expressions
  confirm SystemOperational;
  confirm GyroTemp < 60 degC;
  confirm BatteryVoltage > 23.5 V;
  confirm System.Comm.Status == "ACTIVE";
  confirm DataCollection.ErrorRate < 0.1 %;

  # Complex confirmations
  confirm (PowerLevel > 90 %) and (Temperature < 70 degC);
  confirm not ErrorFlag and SystemReady;
end confirmation
end procedure

# =============================================================================
# Advanced Features Test
# =============================================================================

procedure AdvancedFeatures
main
  # Nested function calls
  Result = ProcessData(GetSensorValue(sensor="primary"), threshold=CalculateThreshold());

  # Complex property access
  Value = System.Subsystem.Component.Sensor.Reading.Current;

  # Advanced mathematical expressions
  Calculation = (sin(Angle) * Radius) + (cos(Angle) * Height);
  Physics = (Mass * Velocity ** 2) / 2;

  # Multi-level conditionals
  if System.Mode == "AUTO" then
    if Sensors.All.Status == "OK" then
      initiate AutoSequence();
    else
      initiate DiagnosticMode();
    end if
  elsif System.Mode == "MANUAL" then
    wait until OperatorReady;
    initiate ManualControl();
  else
    confirm SafeMode;
  end if

  # Nested loops
  for Subsystem in SystemList do
    while Subsystem.Status != "READY" do
      wait until Subsystem.SelfTest == "PASS";
      initiate Subsystem.Initialize();
    end while
  end for

  # Complex unit expressions
  Velocity = Distance / Time;  # m/s
  Acceleration = Velocity / Time;  # m/s²
  Force = Mass * Acceleration;  # N (kg⋅m/s²)
  Energy = Force * Distance;  # J (N⋅m)

  # String concatenation and operations
  FullMessage = "Status: " + SystemStatus + " at " + CurrentTime;

  # Advanced boolean logic
  SystemOK = (PowerGood and TempOK and PressureOK) and not (ErrorFlag or WarningFlag);

  # Parenthesized complex expressions
  Result = ((A + B) * (C - D)) / ((E + F) * (G - H));

end main
end procedure

# =============================================================================
# Edge Cases and Special Scenarios
# =============================================================================

procedure EdgeCases
preconditions
  # Edge case expressions
  wait until Value == 0;
  wait until Flag;
  wait until not ErrorCondition;
end preconditions

main
  # Single character identifiers
  A = 1;
  B = A + 1;

  # Numbers with decimals
  Pi = 3.14159;
  SmallValue = 0.001;
  LargeValue = 1000000;

  # Negative numbers
  NegativeTemp = -273.15 degC;
  Offset = -10;

  # Empty parameter lists
  initiate Reset();
  confirm Status();

  # Single parameter
  initiate SetValue(42);

  # Multiple parameters
  initiate Configure(mode="auto", timeout=30 s, retries=3);

  # Unary expressions
  Negative = -Value;
  Positive = +Value;
  NotFlag = not Flag;

  # Chained comparisons (parsed as binary operations)
  InRange = (Value > MinValue) and (Value < MaxValue);

  # Mixed units in expressions
  TotalTime = StartTime + Duration;

end main

confirmation
  # Simple confirmations
  confirm Ready;
  confirm not Error;
  confirm Status == "OK";
end confirmation
end procedure

# =============================================================================
# Comments and Documentation
# =============================================================================

procedure DocumentedProcedure
# This procedure demonstrates comment usage
preconditions
  # Check initial conditions
  wait until SystemPower > 50 %;  # Minimum power required
  wait until Temperature < 80 degC;  # Thermal protection
end preconditions

main
  # Initialize system components
  initiate PowerSubsystem();  # Start power management
  initiate ThermalControl();  # Start thermal management

  # Main processing loop
  while ProcessingActive do
    # Process data batch
    initiate ProcessBatch();

    # Check for completion
    if BatchComplete then
      confirm BatchProcessed;
    end if
  end while

  # Cleanup operations
  initiate Shutdown();  # Graceful shutdown
end main

confirmation
  # Final system checks
  confirm AllSubsystemsOff;  # Verify shutdown
  confirm PowerConsumption < 1 W;  # Standby power check
end confirmation
end procedure
